import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import models,layers

tf.config.run_functions_eagerly(True)

df=pd.read_csv("goog.csv")
df.head()

df.shape

df.describe()

df.isnull().sum()

df.dtypes

df['Date']=pd.to_datetime(df['Date'])
print(df.dtypes)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(df['Close'].values.reshape(-1,1))

plt.plot(scaled_data)
plt.ylabel("Standardized Values")
plt.xlabel("Time->")
plt.show()

def create_sequences(data, time_steps=6): #change time_steps to change length of sequence
    X = []
    y = []
    for i in range(len(data) - time_steps):
        X.append(data[i:i+time_steps, 0])
        y.append(data[i+time_steps, 0])
    return np.array(X), np.array(y)

train_data = scaled_data[:int(len(scaled_data)*0.8)]
test_data = scaled_data[int(len(scaled_data)*0.8):]

X_train, y_train = create_sequences(train_data)
X_test, y_test = create_sequences(test_data)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
model = Sequential()
model.add(LSTM(units=50, return_sequences = True, input_shape=(X_train.shape[1],1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=51, batch_size=4)

y_pred=model.predict(X_test)
y_pred=scaler.inverse_transform(y_pred)
y_test = scaler.inverse_transform(y_test.reshape(-1,1))

from sklearn.metrics import mean_absolute_error, mean_squared_error
mae,mse=mean_absolute_error(y_test,y_pred), mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print("MAE: ", mae, "\nMSE: ",mse, "\nRMSE: ", rmse)

import matplotlib.pyplot as plt
# Plotting the original test data
plt.plot(y_test, label='Actual Price')
# Plotting the predicted prices
plt.plot(y_pred, label='Predicted Price')
plt.title('Actual vs Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()





