from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix
import pandas as pd
# Load the Fashion-MNIST dataset
# (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
#If THEY GIVE THE DATASET, THEN USE THE CODE BELOW
train = pd.read_csv('fashion-mnist_train.csv')
test = pd.read_csv('fashion-mnist_test.csv')
train_images = train.drop(['label'],axis=1)
train_labels = train['label']
test_images = test.drop(['label'],axis=1)
test_labels = test['label']
# Normalize pixel values
train_images = train_images.astype("float32") / 255.0  
test_images = test_images.astype("float32") / 255.0
# Preprocess data
# train_images = train_images.reshape(-1, 28, 28, 1)  # Reshape to 4D for CNNs
# test_images = test_images.reshape(-1, 28, 28, 1)
#INCASE OF GIVEN CSV DATASET
train_images = train_images.values.reshape(-1, 28, 28, 1)  # Reshape to 4D for CNNs
test_images = test_images.values.reshape(-1, 28, 28, 1)

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat','Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

# Define CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
model.add(Dense(10, activation='softmax'))  # 10 output classes
# Compile model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train model
model.fit(train_images, train_labels, batch_size=32, epochs=1, validation_data=(test_images, test_labels))

# Select a test image for prediction
test_index = np.random.randint(len(test_images))
test_image = test_images[test_index]
test_image = np.expand_dims(test_image, axis=0)  # Add batch dimension

# Predict class
prediction = model.predict(test_image)
predicted_class = np.argmax(prediction)
# Get class labels
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
# Print prediction
print(f"Predicted Class: {class_names[predicted_class]}")


# Show image
plt.imshow(test_image.reshape(28, 28))
plt.title(f"Predicted Class: {class_names[predicted_class]}")
plt.show()

# Evaluate model performance
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test Accuracy: {test_acc:.4f}")

predictions = model.predict(test_images)
predictions = np.argmax(predictions, axis=1)

# Plot confusion matrix heatmap
# Calculate confusion matrix
cm = confusion_matrix(test_labels, predictions)
plt.figure(figsize=(8, 8))
plt.imshow(cm, interpolation='nearest', cmap='Blues')
plt.title('Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names, rotation=45)
plt.yticks(tick_marks, class_names)
# Fix: Limit heatmap labels to actual class range
num_classes = len(class_names)
for i in range(num_classes):
    for j in range(num_classes):
        plt.text(j, i, cm[i, j], ha='center', va='center', fontsize=8)
plt.tight_layout()
plt.show()

from sklearn.metrics import  classification_report
# Classification report
print("\nClassification Report:")
print(classification_report(test_labels, predictions, target_names=class_names))